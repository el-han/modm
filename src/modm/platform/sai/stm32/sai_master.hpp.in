/*
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010, Martin Rosekeit
 * Copyright (c) 2011-2017, Niklas Hauser
 * Copyright (c) 2012, Georgi Grinshpun
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2022, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_SAI_MASTER{{ id }}_HPP
#define MODM_STM32_SAI_MASTER{{ id }}_HPP

#include <modm/platform/gpio/connector.hpp>
#include <modm/math/algorithm/prescaler.hpp>
#include "sai_hal_{{ id }}.hpp"

namespace modm
{

namespace platform
{

/**
 * Serial audio interface (SAI{{ id }}).
 *
 * Simple unbuffered implementation.
 *
 * @author	Hannes Ellinger
 * @ingroup	modm_platform_sai modm_platform_sai_{{id}}
 */
class SaiMaster{{ id }}
{
protected:
	// `state` must be protected to allow access from SaiMasterDma subclass TODO still correct?
	// Bit0: single transfer state
	// Bit1: block transfer state
	static inline uint8_t state{0};
public:
	using HalA = SaiHal{{ id }}BlockA;
	using HalB = SaiHal{{ id }}BlockB;

	// /// Spi Data Mode, Mode0 is the most common mode
	// enum class
	// DataMode : uint32_t
	// {
	// 	Mode0 = 0b00,			///< clock normal,   sample on rising  edge
	// 	Mode1 = SPI_CR1_CPHA,	///< clock normal,   sample on falling edge
	// 	Mode2 = SPI_CR1_CPOL,	///< clock inverted, sample on falling  edge
	// 	Mode3 = SPI_CR1_CPOL | SPI_CR1_CPHA
	// 	///< clock inverted, sample on rising edge
	// };

	// /// Spi Data Order, MsbFirst is the most common mode
	// enum class
	// DataOrder : uint32_t
	// {
	// 	MsbFirst = 0b0,
	// 	LsbFirst = SPI_CR1_LSBFIRST
	// };

	// using DataSize = Hal::DataSize;

public:
	template< class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::Sai{{ id }}, Signals...>;
		using Fs = typename Connector::template GetSignal<Gpio::Signal::Fsa>;  // TODO: Block A and B
		using Sck = typename Connector::template GetSignal<Gpio::Signal::Sck>;
		using Sd = typename Connector::template GetSignal<Gpio::Signal::Sd>;
		using Mclk = typename Connector::template GetSignal<Gpio::Signal::Mck>;

		// Connector::disconnect();
		Fs::setOutput(Gpio::OutputType::PushPull);
		Sck::setOutput(Gpio::OutputType::PushPull);
		Sd::setOutput(Gpio::OutputType::PushPull);
		Mclk::setOutput(Gpio::OutputType::PushPull);
		Connector::connect();
	}

	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(5) >
	static void
	initialize()
	{
		// constexpr auto result = modm::Prescaler::from_power(SystemClock::Spi{{ id }}, baudrate, 2, 256);
		// assertBaudrateInTolerance< result.frequency, baudrate, tolerance >();

		// // translate the prescaler into the bitmapping
		// constexpr SaiHal{{ id }}::Prescaler prescaler{result.index << SPI_CR1_BR_Pos};

		// // initialize the Spi
		// SaiHal{{ id }}::initialize(prescaler);
		state = 0;
	}

	// static void
	// setDataMode(DataMode mode)
	// {
	// 	SaiHal{{ id }}::disableTransfer();
	// 	SaiHal{{ id }}::setDataMode(static_cast<SaiHal{{ id }}::DataMode>(mode));
	// 	SaiHal{{ id }}::enableTransfer();
	// }

	// static void
	// setDataOrder(DataOrder order)
	// {
	// 	SaiHal{{ id }}::disableTransfer();
	// 	SaiHal{{ id }}::setDataOrder(static_cast<SaiHal{{ id }}::DataOrder>(order));
	// 	SaiHal{{ id }}::enableTransfer();
	// }
	// static void
	// setDataSize(DataSize size)
	// {
	// 	SaiHal{{ id }}::disableTransfer();
	// 	SaiHal{{ id }}::setDataSize(static_cast<SaiHal{{ id }}::DataSize>(size));
	// 	SaiHal{{ id }}::enableTransfer();
	// }

	// static uint8_t
	// transferBlocking(uint8_t data)
	// {
	// 	return RF_CALL_BLOCKING(transfer(data));
	// }

	// static void
	// transferBlocking(const uint8_t *tx, uint8_t *rx, std::size_t length)
	// {
	// 	RF_CALL_BLOCKING(transfer(tx, rx, length));
	// }


	// static modm::ResumableResult<uint8_t>
	// transfer(uint8_t data);

	// static modm::ResumableResult<void>
	// transfer(const uint8_t *tx, uint8_t *rx, std::size_t length);
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_SAI_MASTER{{ id }}_HPP
